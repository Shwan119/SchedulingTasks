@model List<SchedulingTasks.Dto.ScheduledTaskResponseDto>

@{
    ViewBag.Title = "Scheduled Tasks Management";
}

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <div class="flex justify-between items-center mb-8">
            <div>
                <h1 class="text-2xl font-bold text-gray-900">Scheduled Tasks Management</h1>
                <p class="mt-2 text-sm text-gray-700">Manage and monitor automated tasks</p>
            </div>
            <button id="btnAddTask" class="inline-flex items-center px-4 py-2 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700 focus:outline-none">
                <i class="fas fa-plus mr-2"></i> Add Task
            </button>
        </div>

        <div class="bg-white shadow-sm rounded-lg overflow-hidden">
            <table class="min-w-full divide-y divide-gray-200">
                <thead class="bg-gray-50">
                    <tr>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Cron Expression</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Endpoint</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Executed</th>
                        <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
                    </tr>
                </thead>
                <tbody class="bg-white divide-y divide-gray-200">
                    @foreach (var task in Model)
                    {
                        <tr class="hover:bg-gray-50" data-task-id="@task.Id">
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                                <div class="flex items-center">
                                    <i class="fas fa-clock text-gray-400 mr-2"></i>
                                    @task.Name
                                </div>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                <span class="font-mono bg-gray-100 px-2 py-1 rounded">@task.CronExpression</span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @task.EndpointName
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap">
                                <span class="@task.GetStatusClass() px-2 py-1 inline-flex text-xs leading-5 font-semibold rounded-full">
                                    @task.Status
                                </span>
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                                @task.LastRun
                            </td>
                            <td class="px-6 py-4 whitespace-nowrap text-sm font-medium space-x-2">
                                <button class="btn-trigger-task text-blue-600 hover:text-blue-900 p-2 rounded" 
                                        data-task-id="@task.Id"
                                        title="Run Task Now">
                                    <i class="fas fa-sync fa-1x"></i>
                                </button>
                                <button class="btn-edit-task text-indigo-600 hover:text-indigo-900 p-2 rounded" 
                                        data-task-id="@task.Id"
                                        title="Edit Task">
                                    <i data-lucide="edit" class="w-5 h-5"></i>
                                </button>
                                <button class="btn-delete-task text-red-600 hover:text-red-900 p-2 rounded" 
                                        data-task-id="@task.Id"
                                        title="Delete Task">
                                    <i data-lucide="trash" class="w-5 h-5"></i>
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Add/Edit Task Modal -->
        <div id="taskModal" class="fixed inset-0 bg-gray-500 bg-opacity-75 flex items-center justify-center hidden">
            <div class="bg-white rounded-lg p-6 max-w-md w-full">
                <div class="flex justify-between items-center mb-4">
                    <h2 class="text-lg font-medium" id="modalTitle">Add New Scheduled Task</h2>
                    <button id="closeModal" class="text-gray-600 hover:text-gray-900">&times;</button>
                </div>
                <form id="taskForm" class="space-y-4">
                    <input type="hidden" id="taskId" name="Id" />
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Task Name</label>
                        <input type="text" id="taskName" name="Name" required 
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:border-indigo-500 focus:ring-indigo-500" />
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Cron Expression</label>
                        <div class="flex space-x-2">
                            <input type="text" id="cronExpression" name="CronExpression" required 
                                   class="flex-grow border-gray-300 rounded-md shadow-sm focus:border-indigo-500 focus:ring-indigo-500" 
                                   placeholder="* * * * *" />
                            <select id="cronPreset" 
                                    class="w-40 border-gray-300 rounded-md shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                                <option value="">Preset</option>
                                <option value="* * * * *">Every Minute</option>
                                <option value="0 * * * *">Hourly</option>
                                <option value="0 0 * * *">Daily</option>
                                <option value="0 9 * * MON">Weekly Monday</option>
                                <option value="0 0 1 * *">Monthly</option>
                            </select>
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Endpoint</label>
                        <select id="endpointId" name="EndpointId" required 
                                class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:border-indigo-500 focus:ring-indigo-500">
                            <option value="">Select Endpoint</option>
                            @foreach (var endpoint in ViewBag.Endpoints)
                            {
                                <option value="@endpoint.Id">@endpoint.Name</option>
                            }
                        </select>
                    </div>
                    
                    <div class="grid grid-cols-2 gap-4">
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Retry Attempts</label>
                            <input type="number" id="retryAttempts" name="RetryAttempts" 
                                   min="0" max="5" value="3" required
                                   class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:border-indigo-500 focus:ring-indigo-500" />
                        </div>
                        <div>
                            <label class="block text-sm font-medium text-gray-700">Timeout (seconds)</label>
                            <input type="number" id="timeoutSeconds" name="TimeoutSeconds" 
                                   min="10" max="3600" value="300" required
                                   class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:border-indigo-500 focus:ring-indigo-500" />
                        </div>
                    </div>
                    
                    <div>
                        <label class="block text-sm font-medium text-gray-700">Notification Email</label>
                        <input type="email" id="notificationEmail" name="NotificationEmail" required 
                               class="mt-1 block w-full border-gray-300 rounded-md shadow-sm focus:border-indigo-500 focus:ring-indigo-500" />
                    </div>
                    
                    <div class="flex justify-end space-x-2">
                        <button type="button" id="cancelModal" 
                                class="px-4 py-2 border border-gray-300 rounded-md text-sm font-medium text-gray-700 hover:bg-gray-50">
                            Cancel
                        </button>
                        <button type="submit" 
                                class="px-4 py-2 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-indigo-600 hover:bg-indigo-700">
                            Save Task
                        </button>
                    </div>
                </form>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        $(document).ready(function() {
            // Modal handling
            $('#btnAddTask').on('click', function() {
                $('#modalTitle').text('Add New Scheduled Task');
                $('#taskForm')[0].reset();
                $('#taskId').val('');
                $('#taskModal').removeClass('hidden');
            });

            $('#closeModal, #cancelModal').on('click', function() {
                $('#taskModal').addClass('hidden');
            });

            // Edit Task Button
            $('.btn-edit-task').on('click', function() {
                var taskId = $(this).data('task-id');
                var row = $(this).closest('tr');
                
                $('#modalTitle').text('Edit Scheduled Task');
                $('#taskId').val(taskId);
                $('#taskName').val(row.find('td:eq(0)').text().trim());
                $('#cronExpression').val(row.find('td:eq(1) span').text());
                $('#endpointId').val(row.data('endpoint-id'));
                
                $('#taskModal').removeClass('hidden');
            });

            // Cron Preset Handling
            $('#cronPreset').on('change', function() {
                $('#cronExpression').val($(this).val());
            });

            // Form Submission
            $('#taskForm').on('submit', function(e) {
                e.preventDefault();
                var isEditMode = $('#taskId').val() !== '';
                
                $.ajax({
                    url: isEditMode ? '/Tasks/UpdateTask' : '/Tasks/CreateTask',
                    type: 'POST',
                    data: $(this).serialize(),
                    success: function(response) {
                        if (response.success) {
                            location.reload();
                        } else {
                            alert('Error saving task');
                        }
                    },
                    error: function() {
                        alert('An error occurred');
                    }
                });
            });

            // Trigger Task
            $('.btn-trigger-task').on('click', function() {
                var taskId = $(this).data('task-id');
                
                $.ajax({
                    url: '/Tasks/TriggerTask',
                    type: 'POST',
                    data: { id: taskId },
                    success: function(response) {
                        if (response.success) {
                            location.reload();
                        } else {
                            alert('Error triggering task');
                        }
                    },
                    error: function() {
                        alert('An error occurred');
                    }
                });
            });

            // Delete Task
            $('.btn-delete-task').on('click', function() {
                var taskId = $(this).data('task-id');
                
                if (confirm('Are you sure you want to delete this task?')) {
                    $.ajax({
                        url: '/Tasks/DeleteTask',
                        type: 'POST',
                        data: { id: taskId },
                        success: function(response) {
                            if (response.success) {
                                location.reload();
                            } else {
                                alert('Error deleting task');
                            }
                        },
                        error: function() {
                            alert('An error occurred');
                        }
                    });
                }
            });
        });

        lucide.createIcons();
    </script>
}