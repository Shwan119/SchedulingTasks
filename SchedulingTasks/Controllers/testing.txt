@* Razor View (.cshtml) *@
<!DOCTYPE html>
<html>
<head>
    <title>Attestation Trigger</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.4.1/css/bootstrap.min.css" rel="stylesheet">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/twitter-bootstrap/3.4.1/js/bootstrap.min.js"></script>
    <style>
        .btn-attestation {
            background: linear-gradient(135deg, #f0ad4e 0%, #ec971f 100%);
            border-color: #d58512;
            color: white;
            font-weight: 600;
            transition: all 0.3s ease;
            min-width: 200px;
        }

        .btn-attestation:hover:not(:disabled) {
            background: linear-gradient(135deg, #ec971f 0%, #d58512 100%);
            border-color: #b06c0c;
            color: white;
            transform: translateY(-1px);
            box-shadow: 0 4px 12px rgba(240, 173, 78, 0.3);
        }

        .btn-attestation:disabled {
            background: #cccccc !important;
            border-color: #cccccc !important;
            cursor: not-allowed !important;
            transform: none !important;
            box-shadow: none !important;
        }

        .spinner {
            display: none;
            width: 16px;
            height: 16px;
            border: 2px solid #ffffff;
            border-top: 2px solid transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 4px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .toast.success {
            background: #5cb85c;
        }

        .toast.error {
            background: #d9534f;
        }

        .toast.show {
            transform: translateX(0);
        }

        .form-container {
            max-width: 600px;
            margin: 50px auto;
            padding: 30px;
            background: white;
            border-radius: 4px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body style="background-color: #f5f5f5;">

<div class="container">
    <div class="form-container">
        <h2 class="text-primary">Attestation Management</h2>
        
        @* Hidden fields to pass data to the AJAX call *@
        <input type="hidden" id="reportId" value="@ViewBag.ReportId" />
        <input type="hidden" id="attesteeId" value="@ViewBag.AttesteeId" />
        
        @* Trigger Attestation Button *@
        <button type="button" id="triggerAttestationBtn" class="btn btn-warning btn-lg btn-attestation">
            <span class="glyphicon glyphicon-send" id="btnIcon"></span>
            <span id="btnText">Trigger Attestation</span>
        </button>
    
    @* Success/Error Messages *@
    <div id="messageContainer" style="margin-top: 20px;"></div>
</div>

<script type="text/javascript">
$(document).ready(function() {
    // Trigger Attestation Button Click Event
    $('#triggerAttestationBtn').click(function() {
        var button = $(this);
        var btnIcon = $('#btnIcon');
        var btnSpinner = $('#btnSpinner');
        var btnText = $('#btnText');
        
        // Get data from hidden fields (or form fields)
        var reportId = $('#reportId').val() || 1; // Default value for demo
        var attesteeId = $('#attesteeId').val() || 1; // Default value for demo
        
        // Disable button and show loading state
        button.prop('disabled', true);
        button.html('<span class="glyphicon glyphicon-refresh glyphicon-spin"></span> Processing...');
        
        // AJAX call to insert record
        $.ajax({
            url: '@Url.Action("TriggerAttestation", "Attestation")',
            type: 'POST',
            data: {
                reportId: reportId,
                attesteeId: attesteeId,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            },
            dataType: 'json',
            success: function(response) {
                if (response.success) {
                    // Success - Keep button disabled and show success state
                    button.html('<span class="glyphicon glyphicon-ok"></span> Attestation Triggered');
                    button.removeClass('btn-primary').addClass('btn-success');
                    
                    // Show success toast
                    showToast('Attestation triggered successfully!', 'success');
                    
                    // Optional: Show additional success message
                    $('#messageContainer').html(
                        '<div class="alert alert-success">' +
                        '<span class="glyphicon glyphicon-ok-circle"></span> ' + response.message +
                        '</div>'
                    );
                } else {
                    // Server returned error - Re-enable button
                    resetButton();
                    showToast(response.message || 'Failed to trigger attestation', 'error');
                }
            },
            error: function(xhr, status, error) {
                // AJAX error - Re-enable button
                resetButton();
                showToast('An error occurred. Please try again.', 'error');
                console.error('AJAX Error:', error);
            }
        });
    });
    
    // Function to reset button to original state
    function resetButton() {
        var button = $('#triggerAttestationBtn');
        
        button.prop('disabled', false);
        button.removeClass('btn-success').addClass('btn-warning');
        button.html('<span class="glyphicon glyphicon-send"></span> Trigger Attestation');
    }
    
    // Toast notification function
    function showToast(message, type) {
        var toast = $('<div class="toast ' + type + '">' + message + '</div>');
        $('body').append(toast);
        
        // Show toast
        setTimeout(function() {
            toast.addClass('show');
        }, 100);
        
        // Hide and remove toast after 4 seconds
        setTimeout(function() {
            toast.removeClass('show');
            setTimeout(function() {
                toast.remove();
            }, 300);
        }, 4000);
    }
});
</script>

@* Anti-forgery token for security *@
@Html.AntiForgeryToken()

</body>
</html>

@* 
============================================================
CONTROLLER CODE (AttestationController.cs) - Using Entity Framework
============================================================
*@

@*
using System;
using System.Web.Mvc;
using System.Data.Entity;

public class AttestationController : Controller
{
    private YourDbContext db = new YourDbContext(); // Replace with your DbContext name

    public ActionResult Index()
    {
        // Pass any necessary data to the view
        ViewBag.ReportId = 1; // Example values
        ViewBag.AttesteeId = 1;
        return View();
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public JsonResult TriggerAttestation(int reportId, int attesteeId)
    {
        try
        {
            // Create new attestation record using Entity Framework
            var attestation = new AttestationTable
            {
                CreatedOn = DateTime.Now,
                ActiveFlag = true,
                Attestee_ID = attesteeId,
                Report_ID = reportId,
                AttestationResult = "Pending",
                Comments = "Triggered via web interface",
                AttestedOn = null // Will be set when attestation is completed
            };

            // Add to context and save
            db.AttestationTables.Add(attestation);
            int result = db.SaveChanges();

            if (result > 0)
            {
                return Json(new { 
                    success = true, 
                    message = "Attestation record created successfully and notification sent to user.",
                    attestationId = attestation.ID
                });
            }
            else
            {
                return Json(new { 
                    success = false, 
                    message = "Failed to create attestation record." 
                });
            }
        }
        catch (Exception ex)
        {
            // Log the exception (use your preferred logging method)
            System.Diagnostics.Debug.WriteLine($"Error in TriggerAttestation: {ex.Message}");
            
            return Json(new { 
                success = false, 
                message = "An error occurred while processing the request." 
            });
        }
    }

    protected override void Dispose(bool disposing)
    {
        if (disposing)
        {
            db.Dispose();
        }
        base.Dispose(disposing);
    }
}

// Entity Framework Model (AttestationTable.cs)
public class AttestationTable
{
    public int ID { get; set; }
    public DateTime CreatedOn { get; set; }
    public bool ActiveFlag { get; set; }
    public DateTime? AttestedOn { get; set; }
    public int Attestee_ID { get; set; }
    public string AttestationResult { get; set; }
    public string Comments { get; set; }
    public int Report_ID { get; set; }
    
    // Navigation properties (optional)
    public virtual User Attestee { get; set; }
    public virtual Report Report { get; set; }
}

// DbContext (YourDbContext.cs)
public class YourDbContext : DbContext
{
    public YourDbContext() : base("DefaultConnection")
    {
    }

    public DbSet<AttestationTable> AttestationTables { get; set; }
    public DbSet<User> Users { get; set; }
    public DbSet<Report> Reports { get; set; }

    protected override void OnModelCreating(DbModelBuilder modelBuilder)
    {
        // Configure table name if different from class name
        modelBuilder.Entity<AttestationTable>().ToTable("AttestationTable");
        
        // Configure relationships
        modelBuilder.Entity<AttestationTable>()
            .HasRequired(a => a.Attestee)
            .WithMany()
            .HasForeignKey(a => a.Attestee_ID);
            
        modelBuilder.Entity<AttestationTable>()
            .HasRequired(a => a.Report)
            .WithMany()
            .HasForeignKey(a => a.Report_ID);
    }
}
*@