@* Razor View (.cshtml) *@
<!DOCTYPE html>
<html>
<head>
    <title>Attestation Trigger</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.6.0/jquery.min.js"></script>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
    <style>
        .attestation-button {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            border: none;
            padding: 12px 24px;
            border-radius: 8px;
            font-size: 16px;
            font-weight: 600;
            cursor: pointer;
            transition: all 0.3s ease;
            display: inline-flex;
            align-items: center;
            gap: 8px;
            min-width: 200px;
            justify-content: center;
        }

        .attestation-button:hover:not(:disabled) {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .attestation-button:disabled {
            background: #cccccc;
            cursor: not-allowed;
            transform: none;
            box-shadow: none;
        }

        .spinner {
            display: none;
            width: 16px;
            height: 16px;
            border: 2px solid #ffffff;
            border-top: 2px solid transparent;
            border-radius: 50%;
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }

        .toast {
            position: fixed;
            top: 20px;
            right: 20px;
            padding: 15px 20px;
            border-radius: 8px;
            color: white;
            font-weight: 500;
            z-index: 1000;
            transform: translateX(400px);
            transition: transform 0.3s ease;
        }

        .toast.success {
            background: linear-gradient(135deg, #4CAF50, #45a049);
        }

        .toast.error {
            background: linear-gradient(135deg, #f44336, #d32f2f);
        }

        .toast.show {
            transform: translateX(0);
        }

        .form-container {
            max-width: 600px;
            margin: 50px auto;
            padding: 30px;
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
        }
    </style>
</head>
<body style="background-color: #f5f5f5; font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;">

<div class="form-container">
    <h2 style="color: #333; margin-bottom: 30px;">Attestation Management</h2>
    
    @* Hidden fields to pass data to the AJAX call *@
    <input type="hidden" id="reportId" value="@ViewBag.ReportId" />
    <input type="hidden" id="attesteeId" value="@ViewBag.AttesteeId" />
    
    @* Trigger Attestation Button *@
    <button type="button" id="triggerAttestationBtn" class="attestation-button">
        <i class="fas fa-paper-plane" id="btnIcon"></i>
        <div class="spinner" id="btnSpinner"></div>
        <span id="btnText">Trigger Attestation</span>
    </button>
    
    @* Success/Error Messages *@
    <div id="messageContainer" style="margin-top: 20px;"></div>
</div>

<script type="text/javascript">
$(document).ready(function() {
    // Trigger Attestation Button Click Event
    $('#triggerAttestationBtn').click(function() {
        var button = $(this);
        var btnIcon = $('#btnIcon');
        var btnSpinner = $('#btnSpinner');
        var btnText = $('#btnText');
        
        // Get data from hidden fields (or form fields)
        var reportId = $('#reportId').val() || 1; // Default value for demo
        var attesteeId = $('#attesteeId').val() || 1; // Default value for demo
        
        // Disable button and show loading state
        button.prop('disabled', true);
        btnIcon.hide();
        btnSpinner.show();
        btnText.text('Processing...');
        
        // AJAX call to insert record
        $.ajax({
            url: '@Url.Action("TriggerAttestation", "Attestation")',
            type: 'POST',
            data: {
                reportId: reportId,
                attesteeId: attesteeId,
                __RequestVerificationToken: $('input[name="__RequestVerificationToken"]').val()
            },
            dataType: 'json',
            success: function(response) {
                if (response.success) {
                    // Success - Keep button disabled and show success state
                    btnText.text('Attestation Triggered');
                    btnIcon.removeClass('fa-paper-plane').addClass('fa-check');
                    btnIcon.show();
                    btnSpinner.hide();
                    
                    // Show success toast
                    showToast('Attestation triggered successfully!', 'success');
                    
                    // Optional: Show additional success message
                    $('#messageContainer').html(
                        '<div style="background: #d4edda; color: #155724; padding: 12px; border-radius: 6px; border-left: 4px solid #28a745;">' +
                        '<i class="fas fa-check-circle"></i> ' + response.message +
                        '</div>'
                    );
                } else {
                    // Server returned error - Re-enable button
                    resetButton();
                    showToast(response.message || 'Failed to trigger attestation', 'error');
                }
            },
            error: function(xhr, status, error) {
                // AJAX error - Re-enable button
                resetButton();
                showToast('An error occurred. Please try again.', 'error');
                console.error('AJAX Error:', error);
            }
        });
    });
    
    // Function to reset button to original state
    function resetButton() {
        var button = $('#triggerAttestationBtn');
        var btnIcon = $('#btnIcon');
        var btnSpinner = $('#btnSpinner');
        var btnText = $('#btnText');
        
        button.prop('disabled', false);
        btnIcon.removeClass('fa-check').addClass('fa-paper-plane').show();
        btnSpinner.hide();
        btnText.text('Trigger Attestation');
    }
    
    // Toast notification function
    function showToast(message, type) {
        var toast = $('<div class="toast ' + type + '">' + message + '</div>');
        $('body').append(toast);
        
        // Show toast
        setTimeout(function() {
            toast.addClass('show');
        }, 100);
        
        // Hide and remove toast after 4 seconds
        setTimeout(function() {
            toast.removeClass('show');
            setTimeout(function() {
                toast.remove();
            }, 300);
        }, 4000);
    }
});
</script>

@* Anti-forgery token for security *@
@Html.AntiForgeryToken()

</body>
</html>

@* 
============================================================
CONTROLLER CODE (AttestationController.cs)
============================================================
*@

@*
using System;
using System.Web.Mvc;
using System.Data.SqlClient;
using System.Configuration;

public class AttestationController : Controller
{
    public ActionResult Index()
    {
        // Pass any necessary data to the view
        ViewBag.ReportId = 1; // Example values
        ViewBag.AttesteeId = 1;
        return View();
    }

    [HttpPost]
    [ValidateAntiForgeryToken]
    public JsonResult TriggerAttestation(int reportId, int attesteeId)
    {
        try
        {
            // Insert record into AttestationTable
            string connectionString = ConfigurationManager.ConnectionStrings["DefaultConnection"].ConnectionString;
            
            using (SqlConnection connection = new SqlConnection(connectionString))
            {
                connection.Open();
                
                string query = @"
                    INSERT INTO AttestationTable 
                    (CreatedOn, ActiveFlag, Attestee_ID, Report_ID, AttestationResult, Comments) 
                    VALUES 
                    (@CreatedOn, @ActiveFlag, @AttesteeId, @ReportId, @Result, @Comments)";
                
                using (SqlCommand command = new SqlCommand(query, connection))
                {
                    command.Parameters.AddWithValue("@CreatedOn", DateTime.Now);
                    command.Parameters.AddWithValue("@ActiveFlag", 1);
                    command.Parameters.AddWithValue("@AttesteeId", attesteeId);
                    command.Parameters.AddWithValue("@ReportId", reportId);
                    command.Parameters.AddWithValue("@Result", "Pending");
                    command.Parameters.AddWithValue("@Comments", "Triggered via web interface");
                    
                    int rowsAffected = command.ExecuteNonQuery();
                    
                    if (rowsAffected > 0)
                    {
                        return Json(new { 
                            success = true, 
                            message = "Attestation record created successfully and notification sent to user." 
                        });
                    }
                    else
                    {
                        return Json(new { 
                            success = false, 
                            message = "Failed to create attestation record." 
                        });
                    }
                }
            }
        }
        catch (Exception ex)
        {
            // Log the exception (use your preferred logging method)
            System.Diagnostics.Debug.WriteLine($"Error in TriggerAttestation: {ex.Message}");
            
            return Json(new { 
                success = false, 
                message = "An error occurred while processing the request." 
            });
        }
    }
}
*@