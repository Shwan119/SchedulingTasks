// rating.js - With star-based deselection
$(function () {
    // Initialize ratings when document is ready
    initializeRatings();

    function initializeRatings() {
        // Create rating cells for each report row
        $('.report-rating-cell').each(function () {
            var $container = $(this);
            var reportId = $container.data('report-id');
            var currentRating = parseInt($container.data('current-rating')) || 0;
            var isPopupOpen = false;
            
            // Create main star - either empty or filled with number based on rating
            var $mainStar = createMainStar(reportId, currentRating);
            
            $container.append($mainStar);
            
            // Create popup with rating stars
            var $popup = $('<div class="rating-popup" id="rating-popup-' + reportId + '">' +
                '<div class="rating-stars-container"></div>' +
                '</div>');
            
            var $starsContainer = $popup.find('.rating-stars-container');
            
            // Add 5 stars to popup
            for (var i = 1; i <= 5; i++) {
                var starClass = i <= currentRating ? 'glyphicon-star' : 'glyphicon-star-empty';
                var $star = $('<div class="rating-star" data-value="' + i + '">' +
                    '<span class="glyphicon ' + starClass + '"></span>' +
                    '</div>');
                
                $starsContainer.append($star);
            }
            
            $container.append($popup);
            
            // Handle click on main star to toggle popup
            function togglePopup(e) {
                e.stopPropagation();
                if (isPopupOpen) {
                    closePopup();
                } else {
                    openPopup();
                }
            }
            
            function openPopup() {
                // Close all other open popups first
                $('.rating-popup.active').removeClass('active');
                $popup.addClass('active');
                isPopupOpen = true;
                
                // Add document click handler to close popup when clicking outside
                setTimeout(function() {
                    $(document).on('click.ratingPopup', function(e) {
                        if (!$(e.target).closest('.rating-popup, .rating-star-container').length) {
                            closePopup();
                        }
                    });
                }, 10);
            }
            
            function closePopup() {
                $popup.removeClass('active');
                isPopupOpen = false;
                $(document).off('click.ratingPopup');
                
                // Reset star display to current rating
                $popup.find('.rating-star span').each(function(index) {
                    var starValue = index + 1;
                    if (starValue <= currentRating) {
                        $(this).removeClass('glyphicon-star-empty').addClass('glyphicon-star');
                    } else {
                        $(this).removeClass('glyphicon-star').addClass('glyphicon-star-empty');
                    }
                });
            }
            
            $mainStar.on('click', togglePopup);
            
            // Handle star hover effects
            $popup.find('.rating-star').on('mouseenter', function() {
                var hoverValue = $(this).data('value');
                
                // Update stars based on hover
                $popup.find('.rating-star span').each(function(index) {
                    var starValue = index + 1;
                    if (starValue <= hoverValue) {
                        $(this).removeClass('glyphicon-star-empty').addClass('glyphicon-star');
                    } else {
                        $(this).removeClass('glyphicon-star').addClass('glyphicon-star-empty');
                    }
                });
            }).on('mouseleave', function() {
                // Reset to current rating on mouse leave
                $popup.find('.rating-star span').each(function(index) {
                    var starValue = index + 1;
                    if (starValue <= currentRating) {
                        $(this).removeClass('glyphicon-star-empty').addClass('glyphicon-star');
                    } else {
                        $(this).removeClass('glyphicon-star').addClass('glyphicon-star-empty');
                    }
                });
            });
            
            // Handle star selection and deselection
            $popup.find('.rating-star').on('click', function(e) {
                e.stopPropagation();
                var newRating = $(this).data('value');
                
                // If clicking the same star as current rating, deselect it
                if (newRating === currentRating) {
                    // Remove rating
                    removeRating(reportId, function(success) {
                        if (success) {
                            currentRating = 0;
                            // Replace with empty star
                            $mainStar.replaceWith(createMainStar(reportId, 0));
                            $mainStar = $container.find('.rating-star-container');
                            
                            // Re-attach click event
                            $mainStar.on('click', togglePopup);
                            
                            // Update stars in popup
                            $popup.find('.rating-star span').removeClass('glyphicon-star').addClass('glyphicon-star-empty');
                            
                            // Show success message
                            showRatingMessage(reportId, 'Rating removed!');
                            
                            // Close popup after brief delay
                            setTimeout(function() {
                                closePopup();
                            }, 1000);
                        }
                    });
                    return;
                }
                
                // Save new rating via AJAX
                saveRating(reportId, newRating, function(success) {
                    if (success) {
                        currentRating = newRating;
                        
                        // Replace the main star with a new one showing the rating
                        $mainStar.replaceWith(createMainStar(reportId, currentRating));
                        $mainStar = $container.find('.rating-star-container');
                        
                        // Re-attach click event
                        $mainStar.on('click', togglePopup);
                        
                        // Update stars in popup
                        $popup.find('.rating-star span').each(function(index) {
                            var starValue = index + 1;
                            if (starValue <= currentRating) {
                                $(this).removeClass('glyphicon-star-empty').addClass('glyphicon-star');
                            } else {
                                $(this).removeClass('glyphicon-star').addClass('glyphicon-star-empty');
                            }
                        });
                        
                        // Show success message
                        showRatingMessage(reportId, 'Rating saved!');
                        
                        // Close popup after brief delay
                        setTimeout(function() {
                            closePopup();
                        }, 1000);
                    } else {
                        showRatingMessage(reportId, 'Error saving rating', true);
                    }
                });
            });
        });
    }
    
    // Function to create the main star based on rating
    function createMainStar(reportId, rating) {
        if (rating > 0) {
            // Create filled star with number
            return $('<div class="rating-star-container">' +
                '<div class="star-with-number">' +
                    '<span class="glyphicon glyphicon-star main-star"></span>' +
                    '<span class="rating-number">' + rating + '</span>' +
                '</div>' +
                '</div>');
        } else {
            // Create empty star
            return $('<div class="rating-star-container">' +
                '<span class="glyphicon glyphicon-star-empty main-star"></span>' +
                '</div>');
        }
    }
    
    // Other functions remain the same
    function saveRating(reportId, rating, callback) {
        $.ajax({
            url: '/Reports/SaveRating',
            type: 'POST',
            data: { reportId: reportId, rating: rating },
            success: function(result) {
                if (result.success) {
                    callback(true);
                } else {
                    console.error('Error saving rating:', result.message);
                    callback(false);
                }
            },
            error: function(xhr, status, error) {
                console.error('AJAX error:', error);
                callback(false);
            }
        });
    }
    
    function removeRating(reportId, callback) {
        $.ajax({
            url: '/Reports/RemoveRating',
            type: 'POST',
            data: { reportId: reportId },
            success: function(result) {
                if (result.success) {
                    callback(true);
                } else {
                    console.error('Error removing rating:', result.message);
                    callback(false);
                }
            },
            error: function(xhr, status, error) {
                console.error('AJAX error:', error);
                callback(false);
            }
        });
    }
    
    function showRatingMessage(reportId, message, isError) {
        var $popup = $('#rating-popup-' + reportId);
        var $message = $popup.find('.rating-message');
        
        if ($message.length === 0) {
            $message = $('<div class="rating-message"></div>');
            $popup.append($message);
        }
        
        $message.text(message).toggleClass('error', !!isError);
        
        setTimeout(function() {
            $message.text('').removeClass('error');
        }, 3000);
    }
});








/* Enhanced rating.css with better spacing and hover effects */
.report-rating-cell {
    position: relative;
    display: flex;
    justify-content: center;
    align-items: center;
    width: 100%;
    height: 100%;
}

.rating-star-container {
    cursor: pointer;
    width: 35px;
    height: 35px;
    display: flex;
    align-items: center;
    justify-content: center;
    border-radius: 50%;
    transition: background-color 0.2s;
}

.rating-star-container:hover {
    background-color: #f5f5f5;
}

.main-star {
    color: #FFD700; /* Gold color for filled stars */
    font-size: 24px;
}

.glyphicon-star-empty {
    color: #ccc; /* Light gray for empty stars */
}

.star-with-number {
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
}

.rating-number {
    position: absolute;
    font-size: 11px;
    font-weight: bold;
    color: #333;
    text-align: center;
}

/* Improved popup styling */
.rating-popup {
    position: absolute;
    top: -5px;
    left: 100%;
    margin-left: 10px;
    background-color: white;
    border: 1px solid #ddd;
    border-radius: 6px;
    box-shadow: 0 3px 8px rgba(0,0,0,0.15);
    padding: 8px 12px;
    display: none;
    z-index: 1000;
}

.rating-popup:before {
    content: '';
    position: absolute;
    left: -6px;
    top: 15px;
    width: 10px;
    height: 10px;
    background-color: white;
    border-left: 1px solid #ddd;
    border-bottom: 1px solid #ddd;
    transform: rotate(45deg);
}

.rating-popup.active {
    display: block;
}

.rating-stars-container {
    display: flex;
    gap: 8px; /* Increased spacing between stars */
}

.rating-star {
    cursor: pointer;
    padding: 4px; /* Increased padding for larger click area */
    border-radius: 3px;
    transition: all 0.2s ease;
}

.rating-star:hover {
    transform: scale(1.15);
    background-color: #f9f9f9;
}

.rating-star .glyphicon {
    font-size: 18px; /* Larger stars */
    transition: color 0.2s;
}

/* Make stars yellow on hover */
.rating-star:hover .glyphicon {
    color: #FFD700 !important; /* Force gold color on hover */
}

.rating-star:hover .glyphicon-star-empty {
    color: #FFD700 !important; /* Make empty stars gold on hover */
}

/* Already-filled stars */
.rating-star .glyphicon-star {
    color: #FFD700;
}

.rating-message {
    text-align: center;
    font-size: 11px;
    margin-top: 6px;
    color: #4caf50;
    font-weight: 500;
}

.rating-message.error {
    color: #f44336;
}



// ReportsController.cs - Rating functionality

/// <summary>
/// Saves a user's rating for a report
/// </summary>
[HttpPost]
public ActionResult SaveRating(int reportId, int rating)
{
    try
    {
        // Validate rating
        if (rating < 1 || rating > 5)
        {
            return Json(new { success = false, message = "Invalid rating value" });
        }

        // Check if report exists
        var report = db.Reports.Find(reportId);
        if (report == null)
        {
            return Json(new { success = false, message = "Report not found" });
        }

        // Get current user ID (assuming ASP.NET Identity)
        var userId = User.Identity.GetUserId();
        
        // Check if user has already rated this report
        var existingRating = db.ReportRatings.FirstOrDefault(r => 
            r.ReportId == reportId && r.UserId == userId);

        if (existingRating != null)
        {
            // Update existing rating
            existingRating.Rating = rating;
            existingRating.RatedDate = DateTime.Now;
        }
        else
        {
            // Create new rating
            var newRating = new ReportRating
            {
                ReportId = reportId,
                UserId = userId,
                Rating = rating,
                RatedDate = DateTime.Now
            };
            db.ReportRatings.Add(newRating);
        }

        db.SaveChanges();

        // Update average rating on the report
        UpdateReportAverageRating(reportId);

        return Json(new { success = true });
    }
    catch (Exception ex)
    {
        // Log the error
        System.Diagnostics.Debug.WriteLine("Error saving rating: " + ex.Message);
        return Json(new { success = false, message = "An error occurred while saving the rating" });
    }
}

/// <summary>
/// Removes a user's rating for a report
/// </summary>
[HttpPost]
public ActionResult RemoveRating(int reportId)
{
    try
    {
        // Check if report exists
        var report = db.Reports.Find(reportId);
        if (report == null)
        {
            return Json(new { success = false, message = "Report not found" });
        }

        // Get current user ID
        var userId = User.Identity.GetUserId();
        
        // Find the user's rating for this report
        var existingRating = db.ReportRatings.FirstOrDefault(r => 
            r.ReportId == reportId && r.UserId == userId);

        if (existingRating != null)
        {
            // Remove the rating
            db.ReportRatings.Remove(existingRating);
            db.SaveChanges();
            
            // Update average rating on the report
            UpdateReportAverageRating(reportId);
            
            return Json(new { success = true });
        }
        else
        {
            // Rating not found - already removed or never existed
            return Json(new { success = true, message = "Rating was already removed" });
        }
    }
    catch (Exception ex)
    {
        // Log the error
        System.Diagnostics.Debug.WriteLine("Error removing rating: " + ex.Message);
        return Json(new { success = false, message = "An error occurred while removing the rating" });
    }
}

/// <summary>
/// Helper method to update the average rating for a report
/// </summary>
private void UpdateReportAverageRating(int reportId)
{
    var report = db.Reports.Find(reportId);
    if (report != null)
    {
        // Check if there are any ratings
        var ratingsExist = db.ReportRatings.Any(r => r.ReportId == reportId);
        
        if (ratingsExist)
        {
            // Calculate new average
            var avgRating = db.ReportRatings
                .Where(r => r.ReportId == reportId)
                .Average(r => (double)r.Rating);
            
            report.AverageRating = avgRating;
        }
        else
        {
            // No ratings left, set to null
            report.AverageRating = null;
        }
        
        db.SaveChanges();
    }
}










$mainStar.html('<span class="glyphicon glyphicon-refresh glyphicon-spin"></span>');

/* Add this to your CSS file */
.glyphicon-spin {
    animation: spin 1s infinite linear;
}

@keyframes spin {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(359deg);
    }
}



// First, do the sort by rating
var ratingOrdered = result.OrderByDescending(r => r.Report.ReportRating ?? 0);

// Then apply the secondary sort based on user selection without repeating the rating sort
if (sortField == ReportDisplayOrder.ID)
{
    return sortDirection == SortDirection.Ascending 
        ? ratingOrdered.ThenBy(r => r.Report.ID).ToList()
        : ratingOrdered.ThenByDescending(r => r.Report.ID).ToList();
}
else if (sortField == ReportDisplayOrder.ReportName)
{
    return sortDirection == SortDirection.Ascending
        ? ratingOrdered.ThenBy(r => r.Report.Name).ToList()
        : ratingOrdered.ThenByDescending(r => r.Report.Name).ToList();
}
else if (sortField == ReportDisplayOrder.UploadDate)
{
    return sortDirection == SortDirection.Ascending
        ? ratingOrdered.ThenBy(r => r.LastUploadDt).ToList()
        : ratingOrdered.ThenByDescending(r => r.LastUploadDt).ToList();
}

// Default case if no sort field matches
return ratingOrdered.ToList();